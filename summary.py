#-------------------------------------------------------------------------------
# Name:        Summary file for Performance Test
# Purpose:
#
# Author:      Liang-Huan chin
#
# Created:     21/08/2013
# Copyright:   (c) Leo Chin 2013
# Licence:     <your licence>
#-------------------------------------------------------------------------------
import os as OS
import sys as SYS
import subprocess as SUB
import glob as GLOB
from time import strftime, localtime
import socket as SOCKET
import platform as PF

def cleanUp(directory):
    """
    this function clean up the previous csv files generated by 'resLogger_AUTORunCombineGraphAnalyze.py'

    Input:
        directory: where .csv files are located


    Output:
        delete those files

    Examples
    --------
      >>> cleanUp("C:\gpqa\")
      >>>
    """
    OS.chdir(directory)
    files=GLOB.glob('*.csv')
    for filename in files:
        OS.unlink(filename)

def runIteration(directory):
    """
    this function carry out 'resLogger_AUTORunCombineGraphAnalyze.py' automatically, the iterations defined in phini.py under pyharness

    Input:
        directory: where .py files are located


    Output:
        Will generate .csv files for the iteration under the same directory.

    Examples
    --------
      >>> runIteration("C:\gpqa\")
      >>>
    """
    SYS.path.insert(0,directory)
    SUB.call([SYS.executable, directory+'resourceLogger/resLogger_AUTORunCombineGraphAnalyze.py', '-f', directory])

def readCSV(directory):
    """
    this function read all the csv file generated from 'runIteration()'

    Input:
        directory: where .csv files are located

    Output:
        a value table contains ['test name', 'Average execution time', 'Memory']

    Examples
    --------
      >>> readCSV("C:\gpqa\")
      >>> [('TEST1', '2.5', '130'),('TEST2','1.8','330', ...)]
    """
    csvList = GLOB.glob(directory+'*.csv')
    test = []
    avgTime = []
    mem = []
    for csv in csvList:
        csvPath = csv.replace("\\","/")

        if csvPath.find("TEST") != -1:
            csvFile = open(csv.replace("\\","/"), 'r')
            test.append(csvPath[csvPath.find("TEST"):-31])
            lst = csvFile.readlines()
            lstVar = lst[len(lst)-1]
            token = lstVar.split(',')
            avgTime.append(float(token[1])/ float(token[0]))
            mem.append(float(token[2]))
    test_t_m = [('{0}'.format(test[i]), '{0}'.format(avgTime[i]), '{0}'.format(mem[i])) for i in xrange(len(test))]
    return test_t_m

def writeSummary(table):
    """
    this function write the value table from 'readCSV()' to a summary.csv

    Input:
        table: value table from readCSV()

    Output:
        write directly into summary csv files

    Examples
    --------
      >>> writeSummary(table)
      >>>
    """
    for item in table:
        summary_file.write(item[0]+","+item[1]+","+item[2]+"\n")

def writeToolSummary(tool, table):
    """
    this function works similiar to 'writeSummary()' but for each tool generates a summary csv

    Input:
        table: value table from readCSV()

    Output:
        write directly into summary csv files

    Examples
    --------
      >>> writeToolSummary(table)
      >>>
    """
    tool_file = open(tool+'_'+strftime("%Y-%m-%d", localtime())+'.csv', 'w')
    # record time, system name and platform info
    tool_file.write("File Generated : "+ strftime("%Y-%m-%d %H:%M:%S", localtime())+"\n")
    tool_file.write("System Name : "+ SOCKET.gethostname()+"\n")
    tool_file.write("Platform Name : "+ PF.platform()+"\n\n\n")
    # the format is Test No  Time   Memory
    tool_file.write("TEST No.,Time(s),Mem(mb)\n")
    # write the value into csv file followed the format of Test No. Time, Memory
    for item in table:
        tool_file.write(item[0]+","+item[1]+","+item[2]+"\n")
    # close the summary csv file
    tool_file.close()

# Main path contains all the test repro
mainPath = 'C:/gpqa/pytest/core/stat'

# tool categories
subPath = ['analyzing_patterns',
           'mapping_clusters',
           'measuring_geographic_distributions',
           'model',
           'modeling_spatial_relationships',
           'rendering',
           'utilities']

# 7 tools
ap = ['generalg', 'globalmorani', 'incrementalsa', 'kfunction', 'nearestneighbor']
mc = ['cluster', 'gi', 'optimizedgi', 'partitional']
mgd = ['centralfeature', 'linear', 'meancenter', 'mediancenter', 'standarddistance', 'standardellipse']
model = ['statModelsTest1', 'statModelsTest2', 'statModelsTest3', 'statModelsTest4', 'statModelsTest5', 'statModelsTest6']
msr = ['exploratoryregression', 'explorecorrelations', 'generateswm', 'geographicallyweightedregression', 'networkswm', 'ols']
render = ['clusterrendered', 'collecteventsrendered', 'countrenderer', 'girendered', 'zrenderer']
util = ['calculatearea', 'calculatedistanceband', 'collectevents', 'exportxyv', 'swm2table']

# create a new csv file named "summary.csv" for the result
summary_file = open('summary'+strftime("%Y-%m-%d", localtime())+'.csv', 'w')
# record time, system name and platform info
summary_file.write("File Generated : "+ strftime("%Y-%m-%d %H:%M:%S", localtime())+"\n")
summary_file.write("System Name : "+ SOCKET.gethostname()+"\n")
summary_file.write("Platform Name : "+ PF.platform()+"\n\n\n")
# write the value into csv file followed the format of Test No. Time, Memory
summary_file.write("TEST No.,Time(s),Mem(mb)\n")

for i in xrange(7):
    if i == 0:
        for tool in ap:
            summary_file.write("\n")
            summary_file.write("For "+tool+" : \n")
            fullPath = mainPath + '/'+subPath[i] + '/' + tool+ '/'
            directory =  fullPath + 'repro/'
            cleanUp(directory)
            runIteration(directory)
            resultTable = readCSV(directory)
            writeSummary(resultTable)
            writeToolSummary(tool, resultTable)

    elif i == 1:
        for tool in mc:
            summary_file.write("\n")
            summary_file.write("For "+tool+" : \n")
            fullPath = mainPath + '/'+subPath[i] + '/' + tool+ '/'
            directory =  fullPath + 'repro/'
            cleanUp(directory)
            runIteration(directory)
            resultTable = readCSV(directory)
            writeSummary(resultTable)
            writeToolSummary(tool, resultTable)
    elif i == 2:
        for tool in mgd:
            summary_file.write("\n")
            summary_file.write("For "+tool+" : \n")
            fullPath = mainPath + '/'+subPath[i] + '/' + tool+ '/'
            directory =  fullPath + 'repro/'
            cleanUp(directory)
            runIteration(directory)
            resultTable = readCSV(directory)
            writeSummary(resultTable)
            writeToolSummary(tool, resultTable)
    elif i == 4:
        for tool in msr:
            summary_file.write("\n")
            summary_file.write("For "+tool+" : \n")
            fullPath = mainPath + '/'+subPath[i] + '/' + tool+ '/'
            directory =  fullPath + 'repro/'
            cleanUp(directory)
            runIteration(directory)
            resultTable = readCSV(directory)
            writeSummary(resultTable)
            writeToolSummary(tool, resultTable)
    elif i == 6:
        for tool in util:
            summary_file.write("\n")
            summary_file.write("For "+tool+" : \n")
            fullPath = mainPath + '/'+subPath[i] + '/' + tool+ '/'
            directory =  fullPath + 'repro/'
            cleanUp(directory)
            runIteration(directory)
            resultTable = readCSV(directory)
            writeSummary(resultTable)
            writeToolSummary(tool, resultTable)
    else:
        msg = "skip model and rendering"

summary_file.close()

OS.remove("resLog_MergedAll.csv")
OS.remove("resLog_MergedHandles.csv")
OS.remove("resLog_MergedTime.csv")
OS.remove("resLog_MergedVMem.csv")
